"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require('@angular/router');
var index_1 = require('../services/index');
var env_config_1 = require('./../../config/env.config');
var CrossDomainComponent = (function () {
    function CrossDomainComponent(subDomainService, companyService, loggedInService, _cookieService) {
        this.subDomainService = subDomainService;
        this.companyService = companyService;
        this.loggedInService = loggedInService;
        this._cookieService = _cookieService;
        this.isLocalStorageSet = false;
        this.domainUrl = env_config_1.Config.APP_EXTENSION;
        this.subDomain = subDomainService.subDomain;
        if (this._cookieService.readCookie('storage'))
            this.isLocalStorageSet = true;
    }
    CrossDomainComponent.prototype.ngOnInit = function () {
        var self = this;
        document.domain = this.domainUrl;
        if (self.subDomain.is_sub_domain_url) {
            if (self.isLocalStorageSet) {
                var storage = JSON.parse(this._cookieService.readCookie('storage'));
                self.companyService.isCompanyMember(localStorage.getItem('company'), storage.user._id)
                    .subscribe(function (data) {
                }, function (response) {
                    localStorage.removeItem('storage');
                });
            }
            window.onmessage = function (e) {
                self.subDomainOperations(e);
            };
        }
        else {
            var parent_1 = window.parent;
            var data = {
                'firstTimeLoaded': true,
                'method': 'set'
            };
            parent_1.postMessage(JSON.stringify(data), '*');
            window.onmessage = function (e) {
                self.mainDomainOperations(e);
            };
        }
    };
    CrossDomainComponent.prototype.ngAfterViewInit = function () {
    };
    CrossDomainComponent.prototype.subDomainOperations = function (e) {
        var self = this;
        var win = document.getElementById('mainUrlIframe').contentWindow;
        var payload = JSON.parse(e.data);
        switch (payload.method) {
            case 'set':
                if (payload.firstTimeLoaded) {
                    win.postMessage(JSON.stringify({ key: 'storage', method: 'get' }), '*');
                }
                else {
                    if (payload.storage && this._cookieService.readCookie('storage') != null) {
                        localStorage.setItem('crossDomainStorage', payload.storage);
                        self.subDomainService.subDomainExists();
                    }
                }
                break;
            case 'remove':
                if (this._cookieService.readCookie('storage')) {
                    localStorage.removeItem('storage');
                    self.loggedInService.logout();
                    window.location.reload();
                }
                break;
        }
    };
    CrossDomainComponent.prototype.mainDomainOperations = function (e) {
        var parent = window.parent;
        var self = this;
        var payload = JSON.parse(e.data);
        switch (payload.method) {
            case 'set':
                localStorage.setItem(payload.key, payload.data);
                break;
            case 'get':
                var data = {
                    'firstTimeLoaded': false,
                    'storage': localStorage.getItem(payload.key),
                    'method': 'set'
                };
                parent.postMessage(JSON.stringify(data), '*');
                break;
            case 'remove':
                localStorage.removeItem('storage');
                localStorage.removeItem('temp_name');
                localStorage.removeItem('domain');
                self.concatIframes();
                self.loggedInService.logout();
                var removeData = {
                    'removed': true
                };
                break;
        }
    };
    CrossDomainComponent.prototype.removeStorageFromSubDomains = function (companies) {
        companies.forEach(function (element) {
            var win = document.getElementById(element.sub_domain + element._id).contentWindow;
            if (win.localStorage.getItem('storage'))
                win.localStorage.removeItem('storage');
        });
    };
    CrossDomainComponent.prototype.concatIframes = function () {
        var _this = this;
        var companies;
        this.companyService.getCompanies()
            .subscribe(function (data) {
            companies = data;
            companies.forEach(function (element) {
                jQuery('<[iframe />');
                jQuery('<iframe />', {
                    name: element.sub_domain,
                    id: element.sub_domain + element._id,
                    src: env_config_1.Config.PROTOCOL + element.sub_domain + '.' + env_config_1.Config.APP_EXTENSION + '/crossDomainComponent'
                }).appendTo('body');
            });
            setTimeout(function () {
                this.removeStorageFromSubDomains(companies);
            }.bind(_this), 20000);
        }, function (response) {
        });
    };
    CrossDomainComponent.prototype.ngOnDestroy = function () {
    };
    CrossDomainComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'og-cross-domain',
            template: "\n    <h1>cross domain operations</h1>\n  ",
            directives: [router_1.ROUTER_DIRECTIVES],
            providers: [index_1.CompanyService],
        }), 
        __metadata('design:paramtypes', [index_1.SubDomainService, index_1.CompanyService, index_1.LoggedInService, index_1.CookieService])
    ], CrossDomainComponent);
    return CrossDomainComponent;
}());
exports.CrossDomainComponent = CrossDomainComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
