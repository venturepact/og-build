"use strict";
var http_1 = require('@angular/http');
var Observable_1 = require('rxjs/Observable');
require('rxjs/add/observable/throw');
var env_config_1 = require('./../../config/env.config');
var BaseService = (function () {
    function BaseService() {
        this._url = env_config_1.Config.API;
        this.storage = this.readCookie('storage');
        if (this.storage) {
            this.storage = JSON.parse(this.storage);
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json', 'Authorization': 'JWT ' + this.storage.token });
        }
        else {
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        }
        this.options = new http_1.RequestOptions({ headers: this.headers });
    }
    BaseService.prototype.post_options = function () {
        return new http_1.RequestOptions({ headers: this.headers, method: 'post' });
    };
    BaseService.prototype.get_options = function () {
        this.storage = this.readCookie('storage');
        if (this.storage) {
            this.storage = JSON.parse(this.storage);
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json', 'Authorization': 'JWT ' + this.storage.token });
        }
        return new http_1.RequestOptions({ headers: this.headers });
    };
    BaseService.prototype.put_options = function () {
        this.storage = this.readCookie('storage');
        if (this.storage) {
            this.storage = JSON.parse(this.storage);
            this.headers = new http_1.Headers({ 'Content-Type': 'application/json', 'Authorization': 'JWT ' + this.storage.token });
        }
        return new http_1.RequestOptions({ headers: this.headers, method: 'put' });
    };
    BaseService.prototype.patch_options = function () {
        return new http_1.RequestOptions({ headers: this.headers, method: 'patch' });
    };
    BaseService.prototype.extractData = function (res) {
        var body = res.json();
        return body.data || {};
    };
    BaseService.prototype.boolData = function (res) {
        var body = res.json();
        return body.data;
    };
    BaseService.prototype.handleError = function (error) {
        var body = error.json();
        if (body.error.code === 'TokenExpiredError') {
            var expires = "";
            var domain = env_config_1.Config.APP_EXTENSION;
            var days = -1;
            var value = '';
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = "storage=" + value + expires + "; domain=" + domain + "; path=/";
            window.location.href = env_config_1.Config.APP_DOMAIN;
        }
        return Observable_1.Observable.throw(body);
    };
    BaseService.prototype.readCookie = function (name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ')
                c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0)
                return c.substring(nameEQ.length, c.length);
        }
        return null;
    };
    BaseService.prototype.createCookie = function (name, value, days) {
        var expires = "";
        var domain = env_config_1.Config.APP_EXTENSION;
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + value + expires + "; domain=" + domain + "; path=/";
    };
    BaseService.prototype.eraseCookie = function (name) {
        this.createCookie(name, "", -1);
    };
    return BaseService;
}());
exports.BaseService = BaseService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
