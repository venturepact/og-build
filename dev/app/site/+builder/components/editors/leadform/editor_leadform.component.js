"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_properties_component_1 = require('../common/common_properties.component');
var model_1 = require('../../../models/model');
var JSONBuilder_service_1 = require('../../../services/JSONBuilder.service');
var selectize_component_1 = require('./component/selectize.component');
var feature_access_service_1 = require('../../../../../shared/services/feature-access.service');
var EditorLeadForm = (function () {
    function EditorLeadForm(jsonBuilderHelper, _featureAuthService) {
        this.jsonBuilderHelper = jsonBuilderHelper;
        this._featureAuthService = _featureAuthService;
        this.isLeadAccessible = false;
        this.types = ["firstName", "email", "tel", "lastName"];
    }
    EditorLeadForm.prototype.ngOnInit = function () {
        this.leadform = this.control.leadform;
        this.isLeadAccessible = this._featureAuthService.features.lead_generation;
        jQuery("#lead_gen_control").stop();
    };
    EditorLeadForm.prototype.toggleRequired = function (field) {
        field.validations.required.status = !field.validations.required.status;
        this.jsonBuilderHelper.setChanged(true);
    };
    EditorLeadForm.prototype.add_Field_In_LeadForm = function () {
        var item = new model_1.Item;
        this.leadform.fields.push(item.getField());
    };
    EditorLeadForm.prototype.toggleLeadform = function (event) {
        if (this.isLeadAccessible) {
            this.leadform.visible = !this.leadform.visible;
            if (this.leadform.visible) {
                this.jsonBuilderHelper.hideOtherLeadForm1();
            }
            this.control.click_button.visible
                ? this.control.leadform.props.title = this.control.click_button.props.title
                : this.control.click_button.props.title = this.control.leadform.props.title;
            if (this.control.click_button)
                this.control.click_button.visible = !this.control.click_button.visible;
        }
        else {
            event.preventDefault();
            jQuery('#premiumModal').modal('show');
            this.leadform.visible = false;
            this.control.click_button.visible = true;
        }
    };
    EditorLeadForm.prototype.delete_Field_From_LeadForm = function (index) {
        this.leadform.fields.splice(index, 1);
    };
    EditorLeadForm.prototype.callGA = function (opt) {
        switch (opt) {
            case "LEADGENTOGGLE":
                if (this.leadform.visible) {
                    ga('markettingteam.send', 'event', 'Settings', 'Toggle', 'LeadGenerationToggleOn');
                    _kmq.push(['record', 'Builder Lead Gen Toggle Set On']);
                }
                else {
                    ga('markettingteam.send', 'event', 'Settings', 'Toggle', 'LeadGenerationToggleOff');
                    _kmq.push(['record', 'Builder Lead Gen Toggle Set Off']);
                }
                break;
            case "DeleteLeadGenField":
                ga('markettingteam.send', 'event', 'Settings', 'Click', 'DeleteLeadGenField');
                _kmq.push(['record', 'Builder Delete Lead Gen Field Click']);
                break;
            case "AddNewLeadField":
                ga('markettingteam.send', 'event', 'Settings', 'Click', 'AddNewLeadField');
                _kmq.push(['record', 'Builder Add New Lead Field Click']);
                break;
            case "SETMANDATE":
                ga('markettingteam.send', 'event', 'Settings', 'Click', 'Set Mandatory');
                _kmq.push(['record', 'Builder Lead Field Set Mandatory Click']);
                break;
            case "UNSETMANDATE":
                ga('markettingteam.send', 'event', 'Settings', 'Click', 'Unset Mandatory');
                _kmq.push(['record', 'Builder Lead Field Unset Mandatory Click']);
                break;
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], EditorLeadForm.prototype, "control", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], EditorLeadForm.prototype, "leadsection", void 0);
    EditorLeadForm = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'editor-lead-form',
            directives: [common_properties_component_1.CommonEditor, selectize_component_1.Selectize],
            encapsulation: core_1.ViewEncapsulation.None,
            template: "\n        <div>\n        <div class=\"form-label no-margin\" >Lead Generation:</div>\n        \n        <div class=\"switch\" [class.alwaysOff]=\"!isLeadAccessible\">\n            <label>\n                <input id=\"lead_gen_control\" type=\"checkbox\" class=\"\" (change)=\"toggleLeadform($event);callGA('LEADGENTOGGLE')\" [checked]=\"leadform.visible\">\n                <span class=\"lever\"></span>\n            </label>\n        </div>\n        <div class=\"help-tip editor-helptip\">\n            <i class=\"material-icons\">info_outline</i>\n            <div class=\"help-checktip\">Toggle here to collect user information (name, email etc) along with the \n                <span *ngIf=\"jsonBuilderHelper.getSelectedPage().type!=='Landing'\"> {{jsonBuilderHelper.getSelectedPage().type }}</span>\n                <span *ngIf=\"jsonBuilderHelper.getSelectedPage().type==='Landing'\"> Welcome Screen</span>.</div>\n        </div>\n        </div>\n        <span *ngIf=\"jsonBuilderHelper.getOtherVisibleLeadForm() &&\n                jsonBuilderHelper.getOtherVisibleLeadForm() !==jsonBuilderHelper.getSelectedPage().type\"\n                class=\"editor-helptext no-margin\"\n                style=\"margin-top: 10px;\"> \n                Please note that you are currently collecting leads on the\n                <i> {{ jsonBuilderHelper.getOtherVisibleLeadForm() }} Page</i>. \n                If you wish to collect leads here instead, Toggle here to override.\n         </span>\n        \n    "
        }), 
        __metadata('design:paramtypes', [JSONBuilder_service_1.JSONBuilder, feature_access_service_1.FeatureAuthService])
    ], EditorLeadForm);
    return EditorLeadForm;
}());
exports.EditorLeadForm = EditorLeadForm;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
