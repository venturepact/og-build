"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var date_range_picker_component_1 = require('../date_range_picker/date_range_picker.component');
var calculator_analytics_service_1 = require('../../services/calculator-analytics.service');
var user_details_popup_component_1 = require('../user_details_popup/user_details_popup.component');
var index_1 = require('../../../../../shared/services/index');
var router_1 = require('@angular/router');
var UserDetailsComponent = (function () {
    function UserDetailsComponent(_calculatorAnalytics, _featureAuthService) {
        this._calculatorAnalytics = _calculatorAnalytics;
        this._featureAuthService = _featureAuthService;
        this.dataSet = [];
        this.avgAnswered = 0;
        this.avgResult = 0;
        this.totalTime = 0;
        this.limit_alert = false;
        this.loader = 0;
        this.postData = {
            start_date: moment().subtract(10, 'days').format('YYYY-MM-DD'),
            end_date: moment().add(1, 'day').format('YYYY-MM-DD')
        };
        this.viewedOnStats = {
            desktop: 0,
            mobile: 0
        };
        this.viewedViaStats = {
            facebook: 0,
            twitter: 0,
            direct: 0
        };
        this.subs = [];
        this.leadLimit = this._featureAuthService.features.leads;
    }
    UserDetailsComponent.prototype.ngAfterViewInit = function () {
        var self = this;
        jQuery(document).on('click', 'a.paginate_button', function () {
            self.initializeViewDetails();
        });
    };
    UserDetailsComponent.prototype.ngOnInit = function () { };
    UserDetailsComponent.prototype.initializeViewDetails = function () {
        var _this = this;
        jQuery('.vd').unbind().bind('click', function (event) {
            _this.visitorKey = jQuery(event.target).data('key');
            jQuery('.user-detail-outer').toggle('slide', { direction: 'right' }, 700);
        });
    };
    UserDetailsComponent.prototype.ngOnChanges = function () {
        if (this.calc) {
            if (this.calc.liveApp)
                this.calc_id = this.calc._id;
            else
                this.calc_id = this.calc.parentApp;
            this.loader = 0;
            this.subs.push(this.getLeadData(this.calc_id));
        }
    };
    UserDetailsComponent.prototype.getLeadData = function (id) {
        var _this = this;
        return this._calculatorAnalytics.getLeads({ id: id, date: this.postData })
            .subscribe(function (response) {
            if (_this.leadLimit != -1) {
                _this.dataSet = response.data.splice(0, _this.leadLimit);
            }
            else
                _this.dataSet = response.data;
            _this.limit_alert = response.limit_cross;
            _this.avgAnswered = Math.round(response.avgAnswers);
            _this.avgResult = response.avgResult;
            _this.dataSet = _this.dataSet.map(function (data) {
                _this.subs.push(_this.getAnalyticData(data));
                data.shift();
                return data;
            });
            _this.intializeDatatable();
        }, function (error) {
            console.log(error);
        });
    };
    UserDetailsComponent.prototype.getAnalyticData = function (lead) {
        var _this = this;
        this.postData.type = 'leadStats';
        this.postData.calc_id = lead[0];
        return this._calculatorAnalytics.getTrafficStats(this.postData)
            .subscribe(function (response) {
            if (response.length) {
                lead[4] = (response[0][4] > 60) ? (response[0][4] / 60).toFixed(2) + ' m' : response[0][4] + ' s';
                lead[3] = response[0][3];
                lead[5] = (response[0][2] == '(not set)' ? 'direct' : response[0][2]);
                _this.totalTime += Number(response[0][4]);
                var avgTime = _this.totalTime / _this.dataSet.length;
                _this.avgLengthTime = (avgTime > 60) ? (avgTime / 60).toFixed(2) + ' m' : avgTime.toFixed(2) + ' s';
                _this.viewedOnStats[response[0][3]] += 1;
                _this.viewedViaStats[response[0][2] == '(not set)' ? 'direct' : response[0][2]] += 1;
                _this.mostViewedVia = Object.keys(_this.viewedViaStats).reduce(function (a, b) { return _this.viewedViaStats[a] > _this.viewedViaStats[b] ? a : b; });
                _this.mostViewedOn = Object.keys(_this.viewedOnStats).reduce(function (a, b) { return _this.viewedOnStats[a] > _this.viewedOnStats[b] ? a : b; });
                _this.intializeDatatable();
            }
            else {
                lead[3] = lead[4] = lead[5] = 'Not Available';
                _this.intializeDatatable();
            }
        }, function (error) {
        });
    };
    UserDetailsComponent.prototype.intializeDatatable = function () {
        var _this = this;
        var self = this;
        if (this.dataTableRef === undefined) {
            this.dataTableRef = jQuery('#myTable').DataTable({
                data: this.dataSet,
                'sPaginationType': 'full_numbers',
                language: {
                    emptyTable: '<center>No data available</center>',
                    paginate: {
                        "previous": '<i class="material-icons">skip_previous</i>',
                        "first": '<i class="material-icons">keyboard_arrow_left</i>',
                        "next": '<i class="material-icons">skip_next</i>',
                        "last": '<i class="material-icons">keyboard_arrow_right</i>'
                    }
                },
                columns: [
                    { title: 'Name' },
                    { title: 'Questions Answered' },
                    { title: (self.calc.templateType == 'Numerical') ? 'Result Obtained' : 'Outcome Obtained' },
                    { title: 'Visited On' },
                    { title: 'Length of Visit' },
                    { title: 'Visited Via' },
                    { title: 'View Details' }
                ]
            });
        }
        else {
            this.dataTableRef.clear();
            this.dataTableRef.rows.add(this.dataSet);
            this.dataTableRef.draw();
        }
        jQuery('.vd').unbind().bind('click', function (event) {
            _this.visitorKey = jQuery(event.target).data('key');
            jQuery('.user-detail-outer').toggle('slide', { direction: 'right' }, 700);
        });
        this.loader = 1;
    };
    UserDetailsComponent.prototype.onDateSelect = function (date) {
        this.postData.start_date = date.start_date;
        this.postData.end_date = date.end_date;
        if (this.calc_id) {
            this.subs.push(this.getLeadData(this.calc_id));
        }
    };
    UserDetailsComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe();
    };
    UserDetailsComponent.prototype.unsubscribe = function () {
        this.subs.forEach(function (sub) { return sub.unsubscribe(); });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], UserDetailsComponent.prototype, "calc", void 0);
    UserDetailsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'og-user-details',
            templateUrl: 'user_details.component.html',
            encapsulation: core_1.ViewEncapsulation.None,
            directives: [date_range_picker_component_1.DateRangePickerComponent, user_details_popup_component_1.UserDetailsPopupComponent, router_1.ROUTER_DIRECTIVES],
            providers: [calculator_analytics_service_1.CalculatorAnalytics]
        }), 
        __metadata('design:paramtypes', [calculator_analytics_service_1.CalculatorAnalytics, index_1.FeatureAuthService])
    ], UserDetailsComponent);
    return UserDetailsComponent;
}());
exports.UserDetailsComponent = UserDetailsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
