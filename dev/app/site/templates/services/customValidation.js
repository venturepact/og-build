"use strict";
var CustomValidator = (function () {
    function CustomValidator() {
    }
    CustomValidator.emailFormat = function (Control) {
        var EMAIL_REGEX = /\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/i;
        if (!EMAIL_REGEX.test(Control.value)) {
            return { 'EmailError': true };
        }
        return null;
    };
    CustomValidator.phoneNumer = function (Control) {
        var PhoneFormat = /^(?:\(?\+?([0-9]{1,3})\)?[-. ]?)?\(?([0-9]{1,3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{2,6})$/;
        if (!PhoneFormat.test(Control.value)) {
            return { 'PhoneNumberError': true };
        }
        return null;
    };
    CustomValidator.calcNameTaken = function (control) {
        var that = this;
        console.log('Hi');
        console.log(control.value);
        return new Promise(function (resolve, reject) {
            if (control.value === 'Mukul')
                resolve({ "calcNameTaken": true });
            else
                resolve(null);
        });
    };
    CustomValidator.checkboxRequired = function (question) {
        return function (group) {
            var valid = false;
            for (name in group.controls) {
                var val = group.controls[name].value;
                if (val) {
                    valid = true;
                    break;
                }
            }
            for (var _i = 0, _a = question.options; _i < _a.length; _i++) {
                var option = _a[_i];
                if (option.selected) {
                    valid = true;
                    break;
                }
            }
            if (valid) {
                return null;
            }
            return { checkboxRequired: true };
        };
    };
    CustomValidator.minimum = function (min) {
        return function (Control) {
            if (Number(Control.value) < Number(min)) {
                return { 'minval': true };
            }
            return null;
        };
    };
    CustomValidator.maximum = function (max) {
        return function (Control) {
            if (Number(Control.value) > Number(max)) {
                return { 'maxval': true };
            }
            return null;
        };
    };
    return CustomValidator;
}());
exports.CustomValidator = CustomValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaXRlL3RlbXBsYXRlcy9zZXJ2aWNlcy9jdXN0b21WYWxpZGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQTtJQUFBO0lBd0ZBLENBQUM7SUF2RlUsMkJBQVcsR0FBbEIsVUFBbUIsT0FBb0I7UUFDbkMsSUFBSSxXQUFXLEdBQUcsK0NBQStDLENBQUM7UUFDbEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ2xDLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUErQ00sMEJBQVUsR0FBakIsVUFBa0IsT0FBb0I7UUFFdEMsSUFBSSxXQUFXLEdBQUcsd0ZBQXdGLENBQUM7UUFDeEcsRUFBRSxDQUFBLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDekMsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZixDQUFDO0lBRU0sNkJBQWEsR0FBcEIsVUFBcUIsT0FBZ0I7UUFDakMsSUFBSSxJQUFJLEdBQUMsSUFBSSxDQUFDO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQWMvQixFQUFFLENBQUEsQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFHLE9BQU8sQ0FBQztnQkFDdkIsT0FBTyxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdkMsSUFBSTtnQkFDSixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBOUVNLGdDQUFnQixHQUFHLFVBQUMsUUFBWTtRQUNuQyxNQUFNLENBQUMsVUFBQyxLQUFnQjtZQUNwQixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbEIsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDckMsRUFBRSxDQUFDLENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDUCxLQUFLLEdBQUcsSUFBSSxDQUFDO29CQUNiLEtBQUssQ0FBQztnQkFDVixDQUFDO1lBQ0wsQ0FBQztZQUNELEdBQUcsQ0FBQyxDQUFlLFVBQWdCLEVBQWhCLEtBQUEsUUFBUSxDQUFDLE9BQU8sRUFBaEIsY0FBZ0IsRUFBaEIsSUFBZ0IsQ0FBQztnQkFBL0IsSUFBSSxNQUFNLFNBQUE7Z0JBQ1gsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ2pCLEtBQUssR0FBRyxJQUFJLENBQUM7b0JBQ2IsS0FBSyxDQUFDO2dCQUNWLENBQUM7YUFDSjtZQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQixDQUFDO1lBRUQsTUFBTSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdEMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFBO0lBQ00sdUJBQU8sR0FBRyxVQUFDLEdBQVc7UUFDekIsTUFBTSxDQUFDLFVBQUMsT0FBb0I7WUFDeEIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDOUIsQ0FBQztZQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFDO0lBRU4sQ0FBQyxDQUFBO0lBRU0sdUJBQU8sR0FBRyxVQUFDLEdBQVc7UUFDekIsTUFBTSxDQUFDLFVBQUMsT0FBb0I7WUFDeEIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDOUIsQ0FBQztZQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFBO0lBb0NMLHNCQUFDO0FBQUQsQ0F4RkEsQUF3RkMsSUFBQTtBQXhGWSx1QkFBZSxrQkF3RjNCLENBQUEiLCJmaWxlIjoiYXBwL3NpdGUvdGVtcGxhdGVzL3NlcnZpY2VzL2N1c3RvbVZhbGlkYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Zvcm1Db250cm9sLCBGb3JtR3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgVmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJy4vdmFsaWRhdGlvbi1yZXN1bHQnO1xyXG5pbXBvcnQge0NvbnRyb2wsIFZhbGlkYXRvcnN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ3VzdG9tVmFsaWRhdG9yIHtcclxuICAgIHN0YXRpYyBlbWFpbEZvcm1hdChDb250cm9sOiBGb3JtQ29udHJvbCkge1xyXG4gICAgICAgIHZhciBFTUFJTF9SRUdFWCA9IC9cXHcrKFtcXC4tXT9cXHcrKSpAXFx3KyhbXFwuLV0/XFx3KykqKFxcLlxcd3syLDN9KSskL2k7XHJcbiAgICAgICAgaWYgKCFFTUFJTF9SRUdFWC50ZXN0KENvbnRyb2wudmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7ICdFbWFpbEVycm9yJzogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY2hlY2tib3hSZXF1aXJlZCA9IChxdWVzdGlvbjphbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gKGdyb3VwOiBGb3JtR3JvdXApID0+IHtcclxuICAgICAgICAgICAgdmFyIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobmFtZSBpbiBncm91cC5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IGdyb3VwLmNvbnRyb2xzW25hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCB2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgb3B0aW9uIG9mIHF1ZXN0aW9uLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbi5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHsgY2hlY2tib3hSZXF1aXJlZDogdHJ1ZSB9O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgbWluaW11bSA9IChtaW46IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHJldHVybiAoQ29udHJvbDogRm9ybUNvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgaWYgKE51bWJlcihDb250cm9sLnZhbHVlKSA8IE51bWJlcihtaW4pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAnbWludmFsJzogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbWF4aW11bSA9IChtYXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHJldHVybiAoQ29udHJvbDogRm9ybUNvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgaWYgKE51bWJlcihDb250cm9sLnZhbHVlKSA+IE51bWJlcihtYXgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAnbWF4dmFsJzogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy9zdGFydCBwaG9uZSB2YWxpZGF0aW9uXHJcbiAgICBzdGF0aWMgcGhvbmVOdW1lcihDb250cm9sOiBGb3JtQ29udHJvbCkge1xyXG4gICAgLy8gdmFyIFBob25lRm9ybWF0ID0gIC9eKD86XFwrPzFbLS4gXT8pP1xcKD8oWzAtOV17M30pXFwpP1stLiBdPyhbMC05XXszfSlbLS4gXT8oWzAtOV17NH0pJC87XHJcbiAgICB2YXIgUGhvbmVGb3JtYXQgPSAvXig/OlxcKD9cXCs/KFswLTldezEsM30pXFwpP1stLiBdPyk/XFwoPyhbMC05XXsxLDN9KVxcKT9bLS4gXT8oWzAtOV17M30pWy0uIF0/KFswLTldezIsNn0pJC87XHJcbiAgICAgICBpZighUGhvbmVGb3JtYXQudGVzdChDb250cm9sLnZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4geyAnUGhvbmVOdW1iZXJFcnJvcic6IHRydWUgfTtcclxuICAgICAgIH1cclxuICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLy9lbmQgcGhvbmUgdmFsaWRhdGlvblxyXG4gICAgc3RhdGljIGNhbGNOYW1lVGFrZW4oY29udHJvbDogQ29udHJvbCk6IFByb21pc2U8VmFsaWRhdGlvblJlc3VsdD4ge1xyXG4gICAgICAgIHZhciB0aGF0PXRoaXM7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0hpJyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vICAgdGhhdC5fYnVpbGRlclNlcnZpY2UuY2hlY2tVbmlxdWVVcmwodXJsKSAgLy9UT0RPIHVkcGF0ZSBzZWN0aW9uIElEXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIC5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIChyZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICB0aGF0Lmpzb25CdWlsZGVySGVscGVyLmRlbGV0ZUNvbnRyb2woKTtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIC8vdG9hc3Qgc3RhcnRcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICB0aGF0LlRvYXN0KFwiRGVsZXRlZCBTdWNjZXNzZnVsbHkuXCIpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgLy8gdG9hc3QgZW5kXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYoY29udHJvbC52YWx1ZT09PSdNdWt1bCcpXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgXCJjYWxjTmFtZVRha2VuXCI6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=
