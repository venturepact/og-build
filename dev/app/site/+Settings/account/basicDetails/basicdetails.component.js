"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var forms_1 = require('@angular/forms');
var core_1 = require('@angular/core');
var index_1 = require('../../../../shared/services/index');
var user_1 = require('../../../../shared/models/user');
var currentPlan_1 = require('../../../../shared/models/currentPlan');
var email_validator_1 = require('./../../../../shared/validators/email.validator');
var BasicDetailsComponent = (function () {
    function BasicDetailsComponent(_userService, fb, _cookieService, _script, _membershipService) {
        this._userService = _userService;
        this.fb = fb;
        this._cookieService = _cookieService;
        this._script = _script;
        this._membershipService = _membershipService;
        this.model = new user_1.User({});
        this.BillingDetails = new currentPlan_1.Customer(null);
        this.submitted = false;
        this.active = true;
        this.error = false;
        this.success = false;
        this.Message = '';
        this.isPlaceExist = false;
        this.hostnameRegexp = new RegExp('^https?://.+?/');
    }
    BasicDetailsComponent.prototype.ngOnInit = function () {
        jQuery.material.init();
        this.basicDetailsForm = this.fb.group({
            name: [this.model.name, forms_1.Validators.compose([
                    forms_1.Validators.required, forms_1.Validators.minLength(4), forms_1.Validators.pattern('^[a-zA-Z ]*$')
                ])],
            phone: [this.model.phone, forms_1.Validators.compose([
                    forms_1.Validators.pattern('[-+0 -9]+$'), forms_1.Validators.minLength(5)
                ])],
            location: [this.model.location],
            timezone: [this.model.timezone]
        });
        this.emailForm = this.fb.group({
            email: [this.model.emails, forms_1.Validators.compose([
                    forms_1.Validators.required, forms_1.Validators.minLength(4), email_validator_1.EmailValidator.format
                ])],
            password: [this.model.password]
        });
    };
    BasicDetailsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._script.load('googleLocation', 'timeZoneMin')
            .then(function (data) {
            _this.initialize();
            _this.getBasicDetails();
        })
            .catch(function (error) {
        });
    };
    BasicDetailsComponent.prototype.initialize = function () {
        localStorage.removeItem('pid');
        var locationElement = document.getElementById('location');
        this.autocomplete = new google.maps.places.Autocomplete((locationElement), { types: ['(cities)'] });
        var self = this;
        google.maps.event.addListener(self.autocomplete, 'place_changed', function () {
            var place = this.getPlace();
            if (place.place_id) {
                self.isPlaceExist = true;
                self.model.location = place.formatted_address;
                locationElement.value = place.formatted_address;
                localStorage.setItem('pid', self.model.location);
                jQuery('#saveBasicDetails').attr('disabled', false);
            }
        });
    };
    BasicDetailsComponent.prototype.chkLocation = function () {
        var pid = localStorage.getItem('pid');
        var locationElement = document.getElementById('location');
        var self = this;
        if (self.isPlaceExist === false && pid === null) {
            locationElement.value = '';
            localStorage.removeItem('pid');
            jQuery('#saveBasicDetails').attr('disabled', true);
        }
        else {
            jQuery('#saveBasicDetails').attr('disabled', false);
            locationElement.value = pid;
            self.model.location = locationElement.value;
        }
    };
    BasicDetailsComponent.prototype.getBasicDetails = function () {
        var _this = this;
        this.timezones = moment.tz.names();
        for (var timezone in this.timezones) {
            this.timezones[timezone] = this.timezones[timezone] + ' ' + moment.tz(this.timezones[timezone]).format('Z z');
        }
        var self = this;
        self._userService.getBasicDetails()
            .subscribe(function (data) {
            self.model = data;
            if (self.model.timezone.length === 0)
                self.model.timezone = 'Select a Timezone';
            self.model.emails = self.model.emails[0].email;
            _this.user_email = self.model.emails;
            if (self.model.location.length === 0) {
                var pos_1;
                navigator.geolocation.getCurrentPosition(function (position) {
                    pos_1 = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var latlng = new google.maps.LatLng(pos_1.lat, pos_1.lng);
                    var geocoder = new google.maps.Geocoder();
                    geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                        if (status === google.maps.GeocoderStatus.OK) {
                            if (results[1]) {
                                self.model.location = results[1].formatted_address;
                            }
                        }
                    });
                });
            }
        }, function (response) {
            self.Message = response.error.err_message;
            jQuery('#basicMessageModal').modal('show');
        });
    };
    BasicDetailsComponent.prototype.onSubmit = function () {
        var _this = this;
        jQuery('#saveBasicDetails').html('Please Wait...');
        this._userService.updateBasicDetails(this.model)
            .subscribe(function (data) {
            _this.getBasicDetails();
            _this.updateBiiling();
            jQuery('#saveBasicDetails').html('Update');
            var storage = JSON.parse(_this._cookieService.readCookie('storage'));
            storage.user.name = data.name;
            _this._cookieService.createCookie('storage', JSON.stringify(storage), 3);
            jQuery('.name-title').html('&nbsp;' + data.name);
            window.toastNotification('Basic Details Updated!');
            ga('markettingteam.send', 'event', 'Settings', 'Submit', 'EditInfo');
            _kmq.push(['record', 'Settings Updated account basic info']);
        }, function (response) {
            _this.Message = response.error.err_message;
            jQuery('#saveBasicDetails').html('Update');
        });
    };
    BasicDetailsComponent.prototype.updateBiiling = function () {
        var _this = this;
        var self = this;
        var getPaymentDeatils = self._membershipService.updateCustomer(self.model.name)
            .subscribe(function (success) {
            _this.BillingDetails = new currentPlan_1.Customer(success.customer);
        }, function (error) {
            getPaymentDeatils.unsubscribe();
        });
    };
    BasicDetailsComponent.prototype.setFalse = function () {
        this.error = false;
        this.success = false;
    };
    BasicDetailsComponent.prototype.updateEmail = function () {
        var _this = this;
        jQuery('#updateEmail').html('Please Wait...');
        jQuery('#updateEmail').attr('disabled', true);
        var storage = JSON.parse(this._cookieService.readCookie('storage'));
        if (storage.user.emails[0].email !== this.model.emails) {
            this._userService.updateEmail(storage.user.emails[0].email, this.model.emails, this.model.password)
                .subscribe(function (data) {
                storage.user.emails = data.emails;
                _this._cookieService.createCookie('storage', JSON.stringify(storage), 3);
                _this.getBasicDetails();
                jQuery('#updateEmail').html('Change Email');
                jQuery('#updateEmail').attr('disabled', false);
                jQuery('#change-email').modal('hide');
                _this.Message = 'Email Updated!';
                _this.success = true;
            }, function (response) {
                var error_code = response.error.code;
                if (error_code === 'E_UNIQUE_USERNAME_VALIDATION' ||
                    error_code === 'E_UNIQUE_EMAIL_VALIDATION' ||
                    error_code === 'E_UNIQUE_UNIDENTIFIED_VALIDATION') {
                    _this.Message = ' Email is already registered with us!';
                }
                else if (error_code === 'E_USER_NOT_FOUND') {
                    _this.Message = response.error.message;
                }
                else {
                    _this.Message = (response.error.err_errors['emails.0.email']) ?
                        response.error.err_errors['emails.0.email'].message :
                        response.error.err_message;
                }
                _this.error = true;
                jQuery('#updateEmail').html('Change Email');
                jQuery('#updateEmail').attr('disabled', false);
            });
        }
        else {
            this.error = true;
            jQuery('#updateEmail').html('Change Email');
            jQuery('#updateEmail').attr('disabled', false);
            this.Message = "Com'on atleast change something.";
        }
    };
    BasicDetailsComponent.prototype.callGA = function (opt) {
        switch (opt) {
            case "UPDATEACCOUNT":
                ga('markettingteam.send', 'event', 'Settings', 'Click', 'EditInfo');
                _kmq.push(['record', 'Settings Update account basic info click']);
                break;
        }
    };
    BasicDetailsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'og-basic-details',
            providers: [index_1.UserService],
            directives: [forms_1.REACTIVE_FORM_DIRECTIVES],
            templateUrl: 'basicdetails.component.html',
            styleUrls: ['basicdetails.component.css']
        }), 
        __metadata('design:paramtypes', [index_1.UserService, forms_1.FormBuilder, index_1.CookieService, index_1.Script, index_1.MembershipService])
    ], BasicDetailsComponent);
    return BasicDetailsComponent;
}());
exports.BasicDetailsComponent = BasicDetailsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
